<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Henrik Fogelberg</title>
    <link>/</link>
    <description>Recent content on Henrik Fogelberg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 20 Sep 2017 08:42:03 +0100</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Introducing TooGo</title>
      <link>/post/toogo/</link>
      <pubDate>Wed, 20 Sep 2017 08:42:03 +0100</pubDate>
      
      <guid>/post/toogo/</guid>
      <description>Ever so often I end up copy-pasting small code functions. This is OK, but it is a bit tedious and in pretty much every web project it&amp;rsquo;s the same handfull of functions I use. So I just dumped them in a package called TooGo (Tools for Go )and they are ready to plug in. Currently there isn&amp;rsquo;t very much in it, but the idea is to keep it growing and add more features as I come up with more useful snippets.</description>
    </item>
    
    <item>
      <title>CV</title>
      <link>/cv/</link>
      <pubDate>Tue, 19 Sep 2017 19:01:13 +0100</pubDate>
      
      <guid>/cv/</guid>
      <description>Summary I have been in the IT industry for more than 20 years and have worked with a wide range of hardware and programming languages. My all time favorite is however Golang, which I currently specialize in.
Apart from programming I have practical experience of technical project management, requirement analyses, testing, business process analyses, software architecture, technical writing, teaching, etc.
Employments Golizzard (own company) September 2015 - Present
Web development in Golang, Node JS, Vue JS.</description>
    </item>
    
    <item>
      <title>Trumpscrape</title>
      <link>/post/trumpscrape/</link>
      <pubDate>Sat, 16 Sep 2017 17:38:04 +0100</pubDate>
      
      <guid>/post/trumpscrape/</guid>
      <description>As a bit of a hobby I am learning the basics of machine learning. Quite a common way of getting data to work with is web scraping. So obviously it was time to figure out how to do it in Go.
It turned out to be really easy thanks to the excellent package goQuery.
The whole idea behind goQuery is to mimic jQuery, but -obviously- in Golang. I haven&amp;rsquo;t used much jQuery the last few years, but felt at home quickly and thanks to the good docs it didn&amp;rsquo;t take long to build a simple app.</description>
    </item>
    
    <item>
      <title>Gofio</title>
      <link>/post/gofio/</link>
      <pubDate>Mon, 04 Sep 2017 15:18:58 +0100</pubDate>
      
      <guid>/post/gofio/</guid>
      <description>Ever so often I have a 4 Mb digital photo that I want to use on a web site. Obviously a 4 Mb image on a web site isn&amp;rsquo;t such a good idea. I could of course open the image in some photo editing program, but a simple command line app that did the job would be nice. Hmmm, perhaps I could write one myself in Go?
It turned out that I could and it wasn&amp;rsquo;t a very big job either.</description>
    </item>
    
    <item>
      <title>Oauth in Golang</title>
      <link>/post/go-oauth/</link>
      <pubDate>Sat, 19 Aug 2017 15:54:56 +0100</pubDate>
      
      <guid>/post/go-oauth/</guid>
      <description>The sample code for the tutorial is available on Github.
Years ago when I first came in contact with Oauth it seemed like magic. I just plugged it in and didn’t think too much about what was going on and why. The truth is that there is no magic involved and it really is quite simple.
There are several packages around for Oauth in Golang, for instance Goth. However if you want to reinvent the wheel and build a version of your own from the ground up it really is quite straight forward.</description>
    </item>
    
    <item>
      <title>Using Firebase auth with Vue</title>
      <link>/post/firebase-auth-vue/</link>
      <pubDate>Tue, 25 Jul 2017 11:43:12 +0100</pubDate>
      
      <guid>/post/firebase-auth-vue/</guid>
      <description>If you’re a startup, an indie developer or just working on some side project in Vue JS, chances are that you will be thinking of using Firebase for storage. This might very well be a good idea: Firebase is really easy to use and has quite a generous free plan. Of course nothing is completely free. If whatever you are working on does take off it could get expensive. But that’s perhaps a bit of a luxury problem.</description>
    </item>
    
    <item>
      <title>Simultaneously Serve Node and Vue</title>
      <link>/post/serve-node-and-vue/</link>
      <pubDate>Fri, 21 Jul 2017 21:45:12 +0100</pubDate>
      
      <guid>/post/serve-node-and-vue/</guid>
      <description>One stumbling block when I first started using Vue was figuring out how to run a Node server in the same project as an application written in Vue JS. I searched all over the net but couldn’t really find anything and ended up with the code in two different projects. That’s fine of course, but I just felt it was a bit unaesthetic and messy. So the search continued!</description>
    </item>
    
    <item>
      <title>Machine Learning Courses Review</title>
      <link>/post/ml-courses-review/</link>
      <pubDate>Fri, 16 Jun 2017 11:04:42 +0100</pubDate>
      
      <guid>/post/ml-courses-review/</guid>
      <description>One morning I woke up realising that I had, again, missed the train. I was a dinosaur, condemned to work in the past. Or perhaps jobless for ever?
Machine learning and artificial intelligence are the hottest subjects right now and there is no going back. What especially ML is about is handling huge amounts of data and making them useful is some way. It could be making suggestions, filtering out information, grouping data in a meaningful way or making predictions.</description>
    </item>
    
    <item>
      <title>Why Go?</title>
      <link>/post/about-go/</link>
      <pubDate>Thu, 01 Jun 2017 13:05:45 +0100</pubDate>
      
      <guid>/post/about-go/</guid>
      <description>Go is an open source programming language, created by Google. The plan was launched in 2007 and the project announced in 2009. Version 1.0 was released in 2012. So the language is quite new, but has already achieved quite a large following.
There are many similarities between Go and C. In many ways the goal was to make a more modern version of C. This really is no coincidense since the brains behind GO, Rob Pike and Ken Thompson, were heavily involved in creating the C programming language.</description>
    </item>
    
    <item>
      <title>About Vue js</title>
      <link>/post/about-vue/</link>
      <pubDate>Tue, 11 Apr 2017 21:45:12 +0100</pubDate>
      
      <guid>/post/about-vue/</guid>
      <description>A couple of years ago new frontend Javascript frameworks started popping up more or less every day. The web was full of sites comparing and describing how to write the obligatory Todo-list using this, that and the other framework and us poor devs became more and more confused, bewildered and frustrated.
One day the dust cleared and we just had two candidates for the final shoot out: Angular and React. Angular made the HUGE tactical mistake by admitting that they were working on Angular 2, which would be more or less a complete rewrite and hardly anything would work the same way as before.</description>
    </item>
    
    <item>
      <title>React Course Review</title>
      <link>/post/react-course-review/</link>
      <pubDate>Thu, 04 Feb 2016 08:16:44 +0100</pubDate>
      
      <guid>/post/react-course-review/</guid>
      <description>I decided it was time to finally learn The Big Thing of the year: React. After a bit of googling I came upon Stephen Grider - a highly active instructor on Udemy, who&amp;rsquo;s created several well recieved courses, mainly concerning Javascript. Obviously he tesches React and React Native. I settled for Modern React with Redux. Like most Udemy courses the pricing is a bit strange. The standard price is 180€, but there&amp;rsquo;s almost always some sale going on.</description>
    </item>
    
    <item>
      <title>Connecting to Mongolab From the Shell</title>
      <link>/post/mongolab-shell/</link>
      <pubDate>Wed, 18 Nov 2015 18:12:41 +0100</pubDate>
      
      <guid>/post/mongolab-shell/</guid>
      <description>For some maintenance work on a Meteor site running on Heroku I needed to connect to the database from the shell. It is of course possible, but finding out how to do it required a bit of digging in the documentation and an email to Mongolab’s support, They responded quickly (thank you!) and here it goes:
1. Finding your credentials To find your password and user id cd in to the root of the repo you are working on and run this command: $ heroku config | grep MONGO.</description>
    </item>
    
    <item>
      <title>Deploy Meteor on Heroku</title>
      <link>/post/meteor-on-heroku/</link>
      <pubDate>Fri, 16 Oct 2015 09:42:46 +0100</pubDate>
      
      <guid>/post/meteor-on-heroku/</guid>
      <description>I’ve used Heroku to host quite a few applications by now. I developed in Rails previously and first heard of Heroku through the Rails community, where it’s a popular hosting option.
Heroku doesn’t natively support Meteor. They do however support Node.js. Since the server side part of Meteor of course is based on Node it will run flawlessly on Heroku if you just follow some simple steps:
 Sign up to [Heroku] if you haven’t done so already and create a new project.</description>
    </item>
    
    <item>
      <title>Iterate and Update MongoDb Docs</title>
      <link>/post/mongo-iterate-update/</link>
      <pubDate>Tue, 13 Oct 2015 18:08:23 +0100</pubDate>
      
      <guid>/post/mongo-iterate-update/</guid>
      <description>I was working on a project with an existing Mongo database where I was going to add a search function. There were pretty much three different options I could think of:
 Writing some more or less complicated code to allow wild card search in a couple of different fields. Adding a few different packages to enable full text search. Faking it!  Option 1 seemed like it could turn in to a maintenance night mare, option 2 felt like overkill in this case.</description>
    </item>
    
    <item>
      <title>Using Semantic With Meteor</title>
      <link>/post/semantic-meteor/</link>
      <pubDate>Thu, 01 Oct 2015 14:02:08 +0100</pubDate>
      
      <guid>/post/semantic-meteor/</guid>
      <description>I’ve been using Bootstrap for quite a few years in pretty much all of my web applications. Bootstrap is great in many ways. The grid layout makes life easy and you get a responsive site for free.
Bootstrap is a bit boring though. Everybody including your grandma is using it and you see so many Bootstrap sites out there. To a trained eye it doesn’t even take a second to see that Bootstrap was involved.</description>
    </item>
    
    <item>
      <title>Setting Up a Mean Machine</title>
      <link>/post/mean-machine/</link>
      <pubDate>Sat, 19 Apr 2014 17:59:24 +0100</pubDate>
      
      <guid>/post/mean-machine/</guid>
      <description>Setting up a MEAN machine I always find it a pleasant experience to set up a development machine from scratch -to just get things the way you want it. At the back of your mind you always know of things that you did wrong and it can be a pain to remove all the junk and clear out the trial and error settings.
So this post is a description of what I did to set up an Node, Angular, Mongo development environment on my new Mac.</description>
    </item>
    
  </channel>
</rss>